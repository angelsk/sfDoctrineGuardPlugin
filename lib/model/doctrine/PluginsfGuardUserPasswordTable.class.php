<?php

/**
 * PluginsfGuardUserPasswordTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginsfGuardUserPasswordTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object PluginsfGuardUserPasswordTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('PluginsfGuardUserPassword');
  }

  /**
   * Get list of old password hashes
   * This assumes same salt and algorithm - FIXME: if gets more complex and salt needs to change
   *
   * @param int $user_id
   * @param string $password_hash
   * @return boolean
   */
  public function checkPasswordHistory($user_id, $password_hash)
  {
    $q = $this->createQuery('p')
              ->where('p.user_id = ? AND p.password = ?', array($user_id, $password_hash));

    $r = $q->fetchOne();

    if ($r) return true;
    else return false;
  }

  /**
   * Get date of last change of password for user
   *
   * @param int $user_id
   * @return string (date)
   */
  public function getLastPasswordChangeDate($user_id)
  {
    $q = $this->createQuery('p')
          ->select('p.created_at')
          ->where('p.user_id = ?', $user_id)
          ->orderBy('p.created_at DESC');

    return $q->fetchOne(null, Doctrine_Core::HYDRATE_SINGLE_SCALAR);
  }

  /**
   * Delete old password history for user
   * Need to do in separate subqueries as MYSQL doesn't support limit in subquery
   *
   * @param int $user_id
   * @return void
   */
  public function deleteOldPasswords($user_id)
  {
    $password_config  = sfConfig::get('app_sf_guard_plugin_password', array('history' => 10));
    $password_history = (isset($password_config['history']) ? $password_config['history'] : 10);
    $password_history = $password_history - 1; // because have one new password to add

    $q = $this->createQuery('p')
              ->select('id')
              ->where('p.user_id = ?', $user_id)
              ->orderBy('p.created_at DESC')
              ->limit($password_history);

    $r = $q->execute(null, Doctrine_Core::HYDRATE_SINGLE_SCALAR);

    if (!is_array($r)) $r = array($r);

    if (count($r) < $password_history) return; // there aren't enough old password
    else
    {
      $q2 = $this->createQuery('p')
                ->delete()
                ->where('p.user_id = ?', $user_id)
                ->andWhereNotIn('p.id', $r);

      $r2 = $q2->execute();

      return;
    }
  }
}